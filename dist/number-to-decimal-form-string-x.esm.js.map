{"version":3,"sources":["../src/number-to-decimal-form-string-x.js"],"names":[],"mappings":"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","file":"number-to-decimal-form-string-x.esm.js","sourcesContent":["import toStr from 'to-string-x';\nimport methodize from 'simple-methodize-x';\n\nconst castNumber = (0).constructor;\nconst EMPTY_STRING = '';\nconst charAt = methodize(EMPTY_STRING.charAt);\nconst slice = methodize(EMPTY_STRING.slice);\nconst search = methodize(EMPTY_STRING.search);\nconst replace = methodize(EMPTY_STRING.replace);\nconst indexOf = methodize(EMPTY_STRING.indexOf);\nconst join = methodize([].join);\nconst DECIMAL_MARK = '.';\nconst HYPHEN_MINUS = '-';\nconst ZERO_STRING = '0';\nconst MINUS_ZERO_STRING = '-0';\nconst VALID_RX = /^-?(?:(?:\\d|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?$/i;\nconst methodizedTest = methodize(VALID_RX.test);\nconst errorMsg = 'not a valid base 10 numeric value';\n\n/**\n * This method converts a base-10 or scientific E-notation value to\n * a decimal form string. Javascript's IEE 754 double-precision numbers\n * give the same precision as `number.toString()`.\n *\n * @param {number|string} value - The value to be converted.\n * @throws {TypeError} If value is not a valid format.\n * @throws {TypeError} If value is a Symbol or not coercible.\n * @returns {string} The value converted to a decimal form string.\n */\nconst toDecimalFormString = function toDecimalFormString(value) {\n  let workingValue = value;\n\n  // Minus zero?\n  if (workingValue === 0 && 1 / workingValue < 0) {\n    workingValue = MINUS_ZERO_STRING;\n  } else {\n    workingValue = toStr(workingValue);\n\n    if (methodizedTest(VALID_RX, workingValue) === false) {\n      throw new TypeError(errorMsg);\n    }\n  }\n\n  // Determine sign.\n  let sign;\n\n  if (charAt(workingValue, 0) === HYPHEN_MINUS) {\n    workingValue = slice(workingValue, 1);\n    sign = -1;\n  } else {\n    sign = 1;\n  }\n\n  // Decimal point?\n  const pointIndex = indexOf(workingValue, DECIMAL_MARK);\n\n  if (pointIndex > -1) {\n    workingValue = replace(workingValue, DECIMAL_MARK, EMPTY_STRING);\n  }\n\n  let exponentIndex = pointIndex;\n  // Exponential form?\n  let index = search(workingValue, /e/i);\n\n  if (index > 0) {\n    // Determine exponent.\n    if (exponentIndex < 0) {\n      exponentIndex = index;\n    }\n\n    exponentIndex += castNumber(slice(workingValue, index + 1));\n    workingValue = slice(workingValue, 0, index);\n  } else if (exponentIndex < 0) {\n    // Integer.\n    exponentIndex = workingValue.length;\n  }\n\n  let leadingZeroIndex = workingValue.length;\n  // Determine leading zeros.\n  index = 0;\n  while (index < leadingZeroIndex && charAt(workingValue, index) === ZERO_STRING) {\n    index += 1;\n  }\n\n  let coefficient;\n  let exponent;\n\n  if (index === leadingZeroIndex) {\n    // Zero.\n    exponent = 0;\n    coefficient = [0];\n  } else {\n    // Determine trailing zeros.\n    if (leadingZeroIndex > 0) {\n      do {\n        leadingZeroIndex -= 1;\n      } while (charAt(workingValue, leadingZeroIndex) === ZERO_STRING && leadingZeroIndex > 0);\n    }\n\n    exponent = exponentIndex - index - 1;\n    coefficient = [];\n    coefficient.length = leadingZeroIndex + 1;\n\n    // Convert string to array of digits without leading/trailing zeros.\n    let position = 0;\n    while (index <= leadingZeroIndex) {\n      coefficient[position] = castNumber(charAt(workingValue, index));\n      position += 1;\n      index += 1;\n    }\n  }\n\n  let decimalForm = join(coefficient, EMPTY_STRING);\n  const decimalFormLength = decimalForm.length;\n\n  if (exponent < 0) {\n    exponent += 1;\n    while (exponent) {\n      decimalForm = ZERO_STRING + decimalForm;\n      exponent += 1;\n    }\n\n    decimalForm = ZERO_STRING + DECIMAL_MARK + decimalForm;\n  } else if (exponent > 0) {\n    exponent += 1;\n\n    if (exponent > decimalFormLength) {\n      exponent -= decimalFormLength;\n      while (exponent) {\n        decimalForm += ZERO_STRING;\n        exponent -= 1;\n      }\n    } else if (exponent < decimalFormLength) {\n      decimalForm = slice(decimalForm, 0, exponent) + DECIMAL_MARK + slice(decimalForm, exponent);\n    }\n\n    // Exponent is zero.\n  } else if (decimalFormLength > 1) {\n    decimalForm = charAt(decimalForm, 0) + DECIMAL_MARK + slice(decimalForm, 1);\n  }\n\n  return sign < 0 ? HYPHEN_MINUS + decimalForm : decimalForm;\n};\n\nexport default toDecimalFormString;\n"]}