{"version":3,"sources":["../src/number-to-decimal-form-string-x.js"],"names":[],"mappings":"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","file":"number-to-decimal-form-string-x.esm.js","sourcesContent":["import toStr from 'to-string-x';\n\nconst castNumber = (0).constructor;\nconst emptyString = '';\nconst {charAt, slice, search, replace, indexOf} = emptyString;\nconst {join} = [];\nconst decimalMark = '.';\nconst hyphenMinus = '-';\nconst zeroSymbol = '0';\nconst minusZeroSymbol = '-0';\nconst isValid = /^-?(?:(?:\\d|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?$/i;\nconst {test} = isValid;\nconst errorMsg = 'not a valid base 10 numeric value';\n\n/**\n * This method converts a base-10 or scientific E-notation value to\n * a decimal form string. Javascript's IEE 754 double-precision numbers\n * give the same precision as `number.toString()`.\n *\n * @param {number|string} value - The value to be converted.\n * @throws {TypeError} If value is not a valid format.\n * @throws {TypeError} If value is a Symbol or not coercible.\n * @returns {string} The value converted to a decimal form string.\n */\nconst toDecimalFormString = function toDecimalFormString(value) {\n  let workingValue = value;\n\n  // Minus zero?\n  if (workingValue === 0 && 1 / workingValue < 0) {\n    workingValue = minusZeroSymbol;\n  } else {\n    workingValue = toStr(workingValue);\n\n    if (test.call(isValid, workingValue) === false) {\n      throw new TypeError(errorMsg);\n    }\n  }\n\n  // Determine sign.\n  let sign;\n\n  if (charAt.call(workingValue, 0) === hyphenMinus) {\n    workingValue = slice.call(workingValue, 1);\n    sign = -1;\n  } else {\n    sign = 1;\n  }\n\n  // Decimal point?\n  const pointIndex = indexOf.call(workingValue, decimalMark);\n\n  if (pointIndex > -1) {\n    workingValue = replace.call(workingValue, decimalMark, emptyString);\n  }\n\n  let exponentIndex = pointIndex;\n  // Exponential form?\n  let index = search.call(workingValue, /e/i);\n\n  if (index > 0) {\n    // Determine exponent.\n    if (exponentIndex < 0) {\n      exponentIndex = index;\n    }\n\n    exponentIndex += castNumber(slice.call(workingValue, index + 1));\n    workingValue = slice.call(workingValue, 0, index);\n  } else if (exponentIndex < 0) {\n    // Integer.\n    exponentIndex = workingValue.length;\n  }\n\n  let leadingZeroIndex = workingValue.length;\n  // Determine leading zeros.\n  index = 0;\n  while (index < leadingZeroIndex && charAt.call(workingValue, index) === zeroSymbol) {\n    index += 1;\n  }\n\n  let coefficient;\n  let exponent;\n\n  if (index === leadingZeroIndex) {\n    // Zero.\n    exponent = 0;\n    coefficient = [0];\n  } else {\n    // Determine trailing zeros.\n    if (leadingZeroIndex > 0) {\n      do {\n        leadingZeroIndex -= 1;\n      } while (charAt.call(workingValue, leadingZeroIndex) === zeroSymbol && leadingZeroIndex > 0);\n    }\n\n    exponent = exponentIndex - index - 1;\n    coefficient = [];\n    coefficient.length = leadingZeroIndex + 1;\n\n    // Convert string to array of digits without leading/trailing zeros.\n    let position = 0;\n    while (index <= leadingZeroIndex) {\n      coefficient[position] = castNumber(charAt.call(workingValue, index));\n      position += 1;\n      index += 1;\n    }\n  }\n\n  let decimalForm = join.call(coefficient, emptyString);\n  const decimalFormLength = decimalForm.length;\n\n  if (exponent < 0) {\n    exponent += 1;\n    while (exponent) {\n      decimalForm = zeroSymbol + decimalForm;\n      exponent += 1;\n    }\n\n    decimalForm = zeroSymbol + decimalMark + decimalForm;\n  } else if (exponent > 0) {\n    exponent += 1;\n\n    if (exponent > decimalFormLength) {\n      exponent -= decimalFormLength;\n      while (exponent) {\n        decimalForm += zeroSymbol;\n        exponent -= 1;\n      }\n    } else if (exponent < decimalFormLength) {\n      decimalForm = slice.call(decimalForm, 0, exponent) + decimalMark + slice.call(decimalForm, exponent);\n    }\n\n    // Exponent is zero.\n  } else if (decimalFormLength > 1) {\n    decimalForm = charAt.call(decimalForm, 0) + decimalMark + slice.call(decimalForm, 1);\n  }\n\n  return sign < 0 ? hyphenMinus + decimalForm : decimalForm;\n};\n\nexport default toDecimalFormString;\n"]}